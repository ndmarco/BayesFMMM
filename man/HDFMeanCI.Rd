% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{HDFMeanCI}
\alias{HDFMeanCI}
\title{Calculates the credible interval for the mean (High Dimensional Functional Data)}
\usage{
HDFMeanCI(
  dir,
  n_files,
  time,
  basis_degree,
  boundary_knots,
  internal_knots,
  k,
  alpha = 0.05,
  rescale = TRUE,
  simultaneous = FALSE,
  burnin_prop = 0.1,
  X = NULL
)
}
\arguments{
\item{dir}{String containing the directory where the MCMC files are located}

\item{n_files}{Int containing the number of files per parameter}

\item{time}{List of matrices that contain the observed time points (each column is a dimension)}

\item{basis_degree}{Vector containing the desired basis degree for each dimension}

\item{boundary_knots}{Matrix containing the boundary knots for each dimension (each row is a dimension)}

\item{internal_knots}{List of vectors containing the internal knots for each dimension}

\item{k}{Int containing the cluster group of which you want to get the credible interval for}

\item{alpha}{Double specifying the percentile of the credible interval ((1 - alpha) * 100 percent)}

\item{rescale}{Boolean indicating whether or not we should rescale the Z variables so that there is at least one observation almost completely in one group}

\item{simultaneous}{Boolean indicating whether or not the credible intervals should be simultaneous credible intervals or pointwise credible intervals}

\item{burnin_prop}{Double containing proportion of MCMC samples to discard}

\item{X}{Matrix containing covariates at points of interest (of dimension N x D (number of points of interest x number of covariates))}
}
\value{
CI list containing the credible interval for the mean function, as well as the median posterior estimate of the mean function. Also returns posterior samples of the mean function.
}
\description{
This function calculates a credible interval with the user specified coverage.
In order to run this function, the directory of the posterior samples needs
to be specified. The function will return the credible intervals and the median
posterior estimate of the mean function at the time points specified by the
user (\code{time} variable). The user can specify if they would like the algorithm
to automatically rescale the parameters for interpretability (suggested). If
the user chooses to rescale, then all class memberships will be rescaled so
that at least one observation is in only one class. The user can also specify
if they want pointwise credible intervals or simultaneous credible intervals.
The simultaneous intervals will likely be wider than the pointwise credible
intervals.
}
\section{Warning}{

The following must be true:
\describe{
  \item{\code{n_files}}{must be an integer larger than or equal to 1}
  \item{\code{basis_degree}}{each element must be an integer larger than or equal to 1}
  \item{\code{internal_knots}}{must lie in the range of corresponding \code{boundary_knots}}
  \item{\code{k}}{must be an integer larger than 1 and less than or equal to the number of clusters in the model}
  \item{\code{alpha}}{must be between 0 and 1}
  \item{\code{burnin_prop}}{must be less than 1 and greater than or equal to 0}
  \item{\code{X}}{must have the same number of columns as covariates in the model (D)}
}
}

\examples{
#########################
### Not Covariate Adj ###
#########################

## Set Hyperparameters
dir <- system.file("test-data", "HDFunctional_trace", "", package = "BayesFMMM")
time <- readRDS(system.file("test-data", "HDtime.RDS", package = "BayesFMMM"))
time <- time[[1]]
n_files <- 1
K <- 2
n_funct <- 20
basis_degree <- c(2,2)
n_eigen <- 2
boundary_knots <- matrix(c(0, 0, 990, 990), nrow = 2)
internal_knots <- rep(list(c(250, 500, 750)), 2)

## Get CI for mean function
CI <- HDFMeanCI(dir, n_files, time, basis_degree, boundary_knots, internal_knots, k)

#####################
### Covariate Adj ###
#####################

dir <- system.file("test-data", "HDFunctional_trace", "", package = "BayesFMMM")
time <- readRDS(system.file("test-data", "HDtime.RDS", package = "BayesFMMM"))
time <- time[[1]]
n_files <- 1
K <- 2
n_funct <- 20
basis_degree <- c(2,2)
n_eigen <- 2
boundary_knots <- matrix(c(0, 0, 990, 990), nrow = 2)
internal_knots <- rep(list(c(250, 500, 750)), 2)
X <- matrix(seq(-2, 2, 0.2), ncol = 1)

## Get CI for mean function
CI <- HDFMeanCI(dir, n_files, time, basis_degree, boundary_knots, internal_knots, k, X = X)

#####################################################################
### Covariate Adj  (with Covariate-depenent covariance structure) ###
#####################################################################

dir <- system.file("test-data", "HDFunctional_trace", "", package = "BayesFMMM")
time <- readRDS(system.file("test-data", "HDtime.RDS", package = "BayesFMMM"))
time <- time[[1]]
n_files <- 1
K <- 2
n_funct <- 20
basis_degree <- c(2,2)
n_eigen <- 2
boundary_knots <- matrix(c(0, 0, 990, 990), nrow = 2)
internal_knots <- rep(list(c(250, 500, 750)), 2)
X <- matrix(seq(-2, 2, 0.2), ncol = 1)

## Get CI for mean function
CI <- HDFMeanCI(dir, n_files, time, basis_degree, boundary_knots, internal_knots, k, X = X)

}
