% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{BMVMMM_warm_start_Mean_Cov_Adj}
\alias{BMVMMM_warm_start_Mean_Cov_Adj}
\title{Performs MCMC for covariate adjusted (mean and covariance) multivariate models}
\usage{
BMVMMM_warm_start_Mean_Cov_Adj(
  tot_mcmc_iters,
  k,
  Y,
  X,
  n_eigen,
  Z_samp,
  pi_samp,
  alpha_3_samp,
  delta_samp,
  gamma_samp,
  Phi_samp,
  A_samp,
  nu_samp,
  tau_samp,
  sigma_samp,
  chi_samp,
  burnin_prop = 0.8,
  dir = NULL,
  thinning_num = 1,
  beta_N_t = 1,
  N_t = 1L,
  n_temp_trans = 0L,
  r_stored_iters = 0L,
  c = NULL,
  b = 10,
  nu_1 = 3,
  alpha1l = 1,
  alpha2l = 2,
  beta1l = 1,
  beta2l = 1,
  a_Z_PM = 10000,
  a_pi_PM = 1000,
  var_alpha3 = 0.05,
  var_epsilon1 = 1,
  var_epsilon2 = 1,
  alpha_nu = 1,
  beta_nu = 10,
  alpha_eta = 1,
  beta_eta = 10,
  alpha_0 = 1,
  beta_0 = 1
)
}
\arguments{
\item{tot_mcmc_iters}{Int containing the total number of MCMC iterations}

\item{k}{Int containing the number of clusters}

\item{Y}{Matrix of observed vectors (each row is an observation)}

\item{X}{Matrix of covariates (each row corresponds to an observation)}

\item{n_eigen}{Int containing the number of eigenfunctions}

\item{Z_samp}{Cube containing initial chain of Z parameters (from \code{BFMMM_NU_Z_multiple_try})}

\item{pi_samp}{Matrix containing initial chain of pi parameters (from \code{BFMMM_NU_Z_multiple_try})}

\item{alpha_3_samp}{Vector containing initial chain of alpha_3 parameters (from \code{BFMMM_NU_Z_multiple_try})}

\item{delta_samp}{Matrix containing initial chain of delta parameters (from \code{BFMMM_Theta_est})}

\item{gamma_samp}{List of cubes containing initial chain of gamma parameters (from \code{BFMMM_Theta_est})}

\item{Phi_samp}{List of cubes containing initial chain of phi parameters (from \code{BFMMM_Theta_est})}

\item{A_samp}{Matrix containing initial chain of A parameters (from \code{BFMMM_Theta_est})}

\item{nu_samp}{Cube containing initial chain of nu parameters (from \code{BFMMM_NU_Z_multiple_try})}

\item{tau_samp}{Matrix containing initial chain of tau parameters (from \code{BFMMM_NU_Z_multiple_try})}

\item{sigma_samp}{Vector containing initial chain of sigma parameters (from \code{BFMMM_Theta_est})}

\item{chi_samp}{Cube containing initial chain of chi parameters (from \code{BFMMM_Theta_est})}

\item{burnin_prop}{Double containing proportion of chain used to estimate the starting point of nu parameters and Z parameters}

\item{dir}{String containing directory where the MCMC files should be saved (if NULL, then no files will be saved)}

\item{thinning_num}{Int containing how often we should save MCMC iterations}

\item{beta_N_t}{Double containing the maximum weight for tempered transitions}

\item{N_t}{Int containing total number of tempered transitions}

\item{n_temp_trans}{Int containing how often tempered transitions are performed (if 0, then no tempered transitions are performed)}

\item{r_stored_iters}{Int containing how many MCMC iterations are stored in RAM (if 0, then all MCMC iterations are stored in RAM)}

\item{c}{Vector containing hyperparmeter for sampling from pi (If left NULL, the one vector will be used)}

\item{b}{double containing hyperparamete for sampling from alpha_3}

\item{nu_1}{double containing hyperparameter for sampling from gamma}

\item{alpha1l}{Double containing hyperparameter for sampling from A}

\item{alpha2l}{Double containing hyperparameter for sampling from A}

\item{beta1l}{Double containing hyperparameter for sampling from A (scale)}

\item{beta2l}{Double containing hyperparameter for sampling from A (scale)}

\item{a_Z_PM}{Double containing hyperparameter of the random walk MH for Z parameter}

\item{a_pi_PM}{Double containing hyperparameter of the random walk MH for pi parameter}

\item{var_alpha3}{Double containing variance parameter of the random walk MH for alpha_3 parameter}

\item{var_epsilon1}{Double containing hyperparameter for sampling from A having to do with variance for Metropolis-Hastings algorithm}

\item{var_epsilon2}{Double containing hyperparameter for sampling from A having to do with variance for Metropolis-Hastings algorithm}

\item{alpha_nu}{Double containing hyperparameter for sampling from tau_nu}

\item{beta_nu}{Double containing hyperparameter for sampling from tau_nu (scale)}

\item{alpha_eta}{Double containing hyperparameter for sampling from tau_eta}

\item{beta_eta}{Double containing hyperparameter for sampling from tau_eta (scale)}

\item{alpha_0}{Double containing hyperparameter for sampling from sigma}

\item{beta_0}{Double containing hyperparameter for sampling from sigma (scale)}
}
\value{
a List containing:
\describe{
  \item{\code{nu}}{Nu samples from the MCMC chain}
  \item{\code{chi}}{chi samples from the MCMC chain}
  \item{\code{pi}}{pi samples from the MCMC chain}
  \item{\code{alpha_3}}{alpha_3 samples from the MCMC chain}
  \item{\code{A}}{A samples from MCMC chain}
  \item{\code{delta}}{delta samples from the MCMC chain}
  \item{\code{sigma}}{sigma samples from the MCMC chain}
  \item{\code{tau}}{tau samples from the MCMC chain}
  \item{\code{tau_eta}}{tau_eta samples from the MCMC chain}
  \item{\code{xi}}{xi samples from the MCMC chain}
  \item{\code{delta_xi}}{delta_xi samples from the MCMC chain}
  \item{\code{gamma_xi}}{gamma_xi samples from the MCMC chain}
  \item{\code{A_xi}}{A_xi samples from the MCMC chain}
  \item{\code{eta}}{eta samples from the MCMC chain}
  \item{\code{gamma}}{gamma samples from the MCMC chain}
  \item{\code{Phi}}{Phi samples from the MCMC chain}
  \item{\code{Z}}{Z samples from the MCMC chain}
  \item{\code{loglik}}{Log-likelihood plot of best performing chain}
}
}
\description{
This function performs MCMC for a covariate adjusted mixed membership model
for multivariate data. This function is specifically for a mean and covariance
adjusted model so the covariates will affect the covariance structure of the model.
This function is meant to be used after using \code{BMVMMM_Nu_Z_multiple_try}
and \code{BMVMMM_Theta_est}. This function will use the outputs of these two
functions to start the MCMC chain in a good location. Since the posterior distribution
can often be multimodal, it is important to have a good starting position.
To help move across modes, this function allows users to use tempered transitions
every \code{n_temp_trans} iterations. By using a mixture of tempered transitions
and un-tempered transitions, we can allow the chain to explore multiple modes without
while keeping sampling relatively computationally efficient. To save on RAM usage, we
allow users to specify how many samples are kept in memory using \code{r_stored_iters}.
If \code{r_stored_iters} is less than \code{tot_mcmc_iters}, then a thinned version
of the chain is stored in the user specified directory (\code{dir}). The samples from each
parameter can be viewed using the following functions: \code{ReadFieldCube},
\code{ReadFieldMat}, \code{ReadFieldVec}, \code{ReadCube}, \code{ReadMat},
\code{ReadVec}.
}
\section{Warning}{

The following must be true:
\describe{
  \item{\code{tot_mcmc_iters}}{must be an integer larger than or equal to 100}
  \item{\code{X}}{must have the same number of rows as Y}
  \item{\code{burnin_prop}}{must be between 0 and 1}
  \item{\code{k}}{must be an integer larger than or equal to 2}
  \item{\code{n_eigen}}{must be greater than or equal to 1}
  \item{\code{dir}}{must be specified if \code{r_stored_iters} <= \code{tot_mcmc_iters} (other than if \code{r_stored_iters} = 0)}
  \item{\code{n_thinning}}{must be a positive integer}
  \item{\code{beta_N_t}}{must be between 1 and 0}
  \item{\code{N_t}}{must be a positive integer}
  \item{\code{n_temp_trans}}{must be a non-negative integer}
  \item{\code{r_stored_iters}}{must be a non-negative integer}
  \item{\code{c}}{must be greater than 0 and have k elements}
  \item{\code{b}}{must be positive}
  \item{\code{nu_1}}{must be positive}
  \item{\code{alpha1l}}{must be positive}
  \item{\code{beta1l}}{must be positive}
  \item{\code{alpha2l}}{must be positive}
  \item{\code{beta1l}}{must be positive}
  \item{\code{a_Z_PM}}{must be positive}
  \item{\code{a_pi_PM}}{must be positive}
  \item{\code{var_alpha3}}{must be positive}
  \item{\code{var_epsilon1}}{must be positive}
  \item{\code{var_epsilon2}}{must be positive}
  \item{\code{alpha_nu}}{must be positive}
  \item{\code{beta_nu}}{must be positive}
  \item{\code{alpha_eta}}{must be positive}
  \item{\code{beta_eta}}{must be positive}
  \item{\code{alpha_0}}{must be positive}
  \item{\code{beta_0}}{must be positive}
}
}

\examples{
## Load sample data
Y <- readRDS(system.file("test-data", "MVSim_data.RDS", package = "BayesFMMM"))

## Set Hyperparameters
tot_mcmc_iters <- 150
n_try <- 1
k <- 2
n_eigen <- 2

## Run function
est1 <- BMVMMM_Nu_Z_multiple_try(tot_mcmc_iters, n_try, k, Y, n_eigen)

## Run function
est2 <- BMVMMM_Theta_est(tot_mcmc_iters, n_try, k, Y, n_eigen, est1$Z, est1$nu)

X <- matrix(rnorm(20, 0 , 1), nrow = 20, ncol = 1)
MCMC.chain <-BMVMMM_warm_start_Mean_Cov_Adj(tot_mcmc_iters, k, Y, X, n_eigen,
                                            est1$Z, est1$pi, est1$alpha_3,
                                            est2$delta, est2$gamma, est2$Phi, est2$A,
                                            est1$nu, est1$tau, est2$sigma, est2$chi)

}
